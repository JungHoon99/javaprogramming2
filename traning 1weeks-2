package traning;

import java.util.*;
import java.awt.*;
import java.awt.event.*;
import java.io.IOException;
import javax.swing.*;
import javax.swing.event.*;
import java.util.ArrayList;

public class train {
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		myFrames f = new myFrames();
	}

}

/* OOP특징
 * 1. 상속과 인터페이스 (계층성)
 * 2. 다형성, 사용편의성 (모듈화)
 * 3. 캡슐화, 정보은닉
 * 4. 자료 추상화 (모델링)
 * 5. 동적 바인딩
 */

// extends가 상속의 대표적인 형태다.
class myFrames extends JFrame{
	
	private JLabel la = new JLabel("Hello");
	private JButton bt = new JButton("change text");
	private JButton bt1 = new JButton("change color");
	Container c = getContentPane();
	
	public myFrames(){
		setTitle("정훈의 코딩 세상");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		GridLayout grid = new GridLayout(2,1);
		c.setLayout(null);
		c.addMouseListener(new MyMouseListener());
		c.addKeyListener(new MyKeyListener());
		la.setSize(50, 20);
		la.setLocation(30, 30);
		bt.setLocation(0, 0);
		bt.setSize(150, 20);
		bt.addActionListener(new textListener());
		bt1.setLocation(0, 20);
		bt1.setSize(150, 20);
		bt1.addActionListener(new colorListener());
		c.add(la);
		c.add(bt);
		c.add(bt1);
		// 키보드와 함께 버튼을 사용 할려면 모든 버튼에 필요
		c.requestFocus(); 		//스윙에서는 버튼과 키보드를 입력을 받을 수 없다. 
		c.setFocusable(true);	//포커스를 다시 키보드로 받을 수 있게 드라이브 해줘야한다.
		setSize(300,300);
		setVisible(true); 
	}
	
	// 버튼 액션 리스너 설정
	// implements의 가장 큰 특징은 이렇게 부모의 메소드를 반드시 오버라이딩(재정의)해야 한다.
	// implements는 다중상속을 대신해준다.
	class colorListener implements ActionListener{
		/*
		 * extends는 일반 클래스와 abstract 클래스 상속에 사용되고, implement는 interface 상속에 사용된다.
		 * class가 class를 상속받을 땐 extends를 사용하고, interface가 interface를 상속 받을 땐 extends를 사용한다.
		 * class가 interface를 사용할 땐 implements를 써야하고
		 * interface가 class를 사용할 땐 implements를 쓸수 없다.
		 * extends는 클래스 한 개만 상속 받을 수 있다.
		 * extends 자신 클래스는 부모 클래스의 기능을 사용한다.
		 * implements는 여러개 사용 가능하다.
		 * implements는 설계 목적으로 구현 가능하다.
		 * implements한 클래스는 implements의 내용을 다 사용해야 한다. 
		*/
		@Override
		public void actionPerformed(ActionEvent e) {

			if (la.getText() == "Hello")
				la.setForeground(Color.orange);
			else
				la.setForeground(Color.blue);
			
			// 키보드와 함께 버튼을 사용 할려면 모든 버튼에 필요
			c.requestFocus(); 
			c.setFocusable(true);
		}
	}
	
	//버튼 액션 리스너 설정
	class textListener implements ActionListener{
		@Override
		public void actionPerformed(ActionEvent e) {

			if (la.getText() == "Hello")
				la.setText("안녕");
			else
				la.setText("Hello");
			
			// 키보드와 함께 버튼을 사용 할려면 모든 버튼에 필요
			c.requestFocus(); 
			c.setFocusable(true);
		}
	}
	
	// 키보드 액션 리스너 설정
	class MyKeyListener implements KeyListener{
		int x,y;
		int key;
		@Override
		public void keyTyped(KeyEvent e){}
		@Override
		public void keyPressed(KeyEvent e)
		{
			key = e.getKeyCode();
			if(key == KeyEvent.VK_UP) {
				x = la.getX();
				y = la.getY();
				la.setLocation(x,y-1);
			}
			if(key == KeyEvent.VK_DOWN) {
				x = la.getX();
				y = la.getY();
				la.setLocation(x,y+1);
			}
			if(key == KeyEvent.VK_RIGHT) {
				x = la.getX();
				y = la.getY();
				la.setLocation(x+1,y);
			}
			if(key == KeyEvent.VK_LEFT) {
				x = la.getX();
				y = la.getY();
				la.setLocation(x-1,y);
			}
		}
		@Override
		public void keyReleased(KeyEvent e)
		{
		}
	}
	
	//마우스 액션 리스너 설정
	class MyMouseListener implements MouseListener{

	    @Override
	    public void mouseClicked(MouseEvent e) {
	    	int x = e.getX();
	    	int y = e.getY();
	    	la.setLocation(x,y);
	    }

	    @Override
	    public void mousePressed(MouseEvent e) {
	    }

	    @Override
	    public void mouseReleased(MouseEvent e) {
	    }

	    @Override
	    public void mouseEntered(MouseEvent e) {
	    }

	    @Override
	    public void mouseExited(MouseEvent e) {
	    }
	}
}
